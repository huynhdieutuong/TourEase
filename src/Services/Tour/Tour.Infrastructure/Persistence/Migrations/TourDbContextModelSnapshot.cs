// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tour.Infrastructure.Persistence;

#nullable disable

namespace Tour.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TourDbContext))]
    partial class TourDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tour.Domain.Entities.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itinerary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageSpoken")
                        .HasColumnType("int");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TourJobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourJobId")
                        .IsUnique();

                    b.ToTable("TourDetail");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourDetailDestination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TourDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("TourDetailId");

                    b.ToTable("TourDetailDestination");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("SalaryPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalApplicants")
                        .HasColumnType("int");

                    b.Property<string>("TourGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TourJob");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Destination", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Destination", "Parent")
                        .WithMany("SubDestinations")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourDetail", b =>
                {
                    b.HasOne("Tour.Domain.Entities.TourJob", "TourJob")
                        .WithOne("Detail")
                        .HasForeignKey("Tour.Domain.Entities.TourDetail", "TourJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourJob");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourDetailDestination", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Destination", "Destination")
                        .WithMany("TourDetailDestinations")
                        .HasForeignKey("DestinationId");

                    b.HasOne("Tour.Domain.Entities.TourDetail", "TourDetail")
                        .WithMany("TourDetailDestinations")
                        .HasForeignKey("TourDetailId");

                    b.Navigation("Destination");

                    b.Navigation("TourDetail");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Destination", b =>
                {
                    b.Navigation("SubDestinations");

                    b.Navigation("TourDetailDestinations");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourDetail", b =>
                {
                    b.Navigation("TourDetailDestinations");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TourJob", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
